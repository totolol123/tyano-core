AC_PREREQ([2.69])
AC_INIT([Tyano Core],[1.0.2],[],[tc])
AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_SRCDIR([sources/server.h])
AM_INIT_AUTOMAKE([foreign subdir-objects -Wall -Werror])
AC_LANG([C++])


# why don't tests fail by default? :(
AC_DEFUN([FAIL], [AC_MSG_ERROR([^ last tests failed])])


# unset defaults
CXXFLAGS=""


# read arguments 
AC_ARG_ENABLE([optimizations],
	AS_HELP_STRING([--disable-optimizations], [disable compile- and link-time optimizations]))
	
AC_ARG_ENABLE([profiling],
	AS_HELP_STRING([--enable-profiling], [enable profiler support]))
	
AC_ARG_ENABLE([debugging-symbols],
	AS_HELP_STRING([--disable-debugging-symbols], [strip debugging symbols from server for smaller file size]))


# checks generated by autoscan
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_CHECK_HEADERS([arpa/inet.h netdb.h netinet/in.h stddef.h stdint.h stdlib.h sys/socket.h sys/timeb.h unistd.h],, [FAIL])
AC_C_INLINE
AC_TYPE_INT16_T
AC_TYPE_INT32_T
AC_TYPE_INT64_T
AC_TYPE_INT8_T
AC_TYPE_SIZE_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T
AC_CHECK_FUNCS([atexit floor ftime gethostbyname gethostname memset pow socket sqrt strcasecmp strncasecmp],, [FAIL])


# C++11
AX_CXX_COMPILE_STDCXX_11([ext])


# Boost
BOOST_REQUIRE([1.50])
BOOST_ASIO
BOOST_BIND
BOOST_DATE_TIME([mt])
BOOST_FILESYSTEM([mt])
BOOST_FOREACH
BOOST_FUNCTION
BOOST_REGEX([mt])
BOOST_SMART_PTR
BOOST_STRING_ALGO
BOOST_SYSTEM([mt])
BOOST_THREADS([mt])
BOOST_TOKENIZER
BOOST_UTILITY
BOOST_VARIANT
BOOST_FIND_HEADER([boost/any.hpp])
BOOST_FIND_HEADER([boost/config.hpp])
BOOST_FIND_HEADER([boost/current_function.hpp])
BOOST_FIND_HEADER([boost/enable_shared_from_this.hpp])
BOOST_FIND_HEADER([boost/intrusive_ptr.hpp])
BOOST_FIND_HEADER([boost/range/adaptor/reversed.hpp])
BOOST_FIND_HEADER([boost/tr1/unordered_set.hpp])


# gmp
AC_CHECK_HEADERS([gmp.h],, [FAIL])
AC_CHECK_LIB([gmp], [__gmpz_init2],, [FAIL])


# log4cxx >= 0.10
PKG_CHECK_MODULES([LOG4CXX], [liblog4cxx >= 0.10], [LIBS="$LOG4CXX_LIBS $LIBS"], [
	AC_CHECK_HEADERS([log4cxx/log4cxx.h],, [FAIL])
	AC_CHECK_LIB([log4cxx], [main],, [FAIL])
])


# LUA >= 5.1
PKG_CHECK_MODULES([LUA], [lua5.1], [LIBS="$LUA_LIBS $LIBS"], [
	PKG_CHECK_MODULES([LUA], [lua >= 5.1], [LIBS="$LUA_LIBS $LIBS"], [
		AC_CHECK_HEADERS([lua.hpp],, [FAIL])
		AC_CHECK_LIB([lua5.1], [main],, [FAIL])
	])
])


# MySQL
AC_CHECK_HEADERS([mysql/mysql.h],, [FAIL])
AC_CHECK_LIB([mysqlclient], [main],, [FAIL])


# pthread
AC_CHECK_LIB([pthread], [pthread_create],, [FAIL])


# XML >= 2.6.5
AM_PATH_XML2([2.6.5], [LIBS="$XML_LIBS $LIBS"],, [FAIL])


# apply arguments
AS_IF([test "x${enable_optimizations:=yes}" = "xyes"], [CXXFLAGS="$CXXFLAGS -Ofast -flto -fwhole-program -funroll-loops -mtune=native -march=native"], [CXXFLAGS="$CXXFLAGS -O0"])
AS_IF([test "x${enable_profiling:=no}" = "xyes"], [CXXFLAGS="$CXXFLAGS -pg"])
AS_IF([test "x${enable_debugging_symbols:=yes}" = "xyes"], [CXXFLAGS="$CXXFLAGS -g"], [CXXFLAGS="$CXXFLAGS -s"])


AC_CONFIG_HEADERS([config.h])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT


echo
echo $PACKAGE_STRING
echo
echo Debugging Symbols ... $enable_debugging_symbols
echo Optimizations ....... $enable_optimizations
echo Profiling ........... $enable_profiling
echo
echo Configuration complete!
echo
